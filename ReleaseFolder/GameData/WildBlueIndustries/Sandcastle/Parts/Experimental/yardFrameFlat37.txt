PART
{
	name = yardFrameFlat37v2
	module = Part
	author = Angel-125
	MODEL
	{
		model = WildBlueIndustries/Sandcastle/Parts/Structural/ModularShipyard/yardFrameFlat37Single
	}
	rescaleFactor = 1

	node_stack_top = 0, 1.875, 0, 0, 1, 0, 2
	node_stack_bottom = 0, -1.875, 0, 0, -1, 0, 2
	node_stack_left	= 1.875, 0, 0, 1, 0, 0, 2
	node_stack_right = -1.875, 0, 0 ,-1, 0, 0, 2
	node_stack_front = 0, 0, 0.09375, 0, 0, 1, 2
	node_stack_back = 0, 0, -0.09375, 0, 0, -1, 2
	node_attach = 0, 1.875, 0, 0, 1, 0, 2
	
	TechRequired = specializedConstruction
	entryCost = 9800
	cost = 120
	category = Structural
	subcategory = 0
	title = (Experimental) Yard Frame // #LOC_SANDCASTLE_yardFrameFlat37Title // MS-37 Yard Frame
	manufacturer = #autoLOC_501663 // Dinkelstein Kerman's Construction Emporium
	description = #LOC_SANDCASTLE_yardFrameFlatDesc // A sturdy modular metal frame that is optimized for creating orbiting shipyards. It can be configured into a grid shape to make large structures.
	attachRules = 1,1,1,1,1
	mass = 0.25
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 1
	crashTolerance = 80
	breakingForce = 2000
	breakingTorque = 2000
	maxTemp = 2000 // = 3200
	stackSymmetry = 1
	fuelCrossFeed = False
	bulkheadProfiles = size3, srf
	tags = body build construct cover extend fabricate plat structur support cck-Sandcastle

	// This module lets you create a grid of meshes out of a single model.
	// You can create large grids out of the single model without the need for large numbers of parts.
	MODULE
	{
		name = ModuleMeshGrid

		// Name of the mesh transform that we'll clone into a grid.
		meshTransformName = yardFrameFlat37

		// Whenever you update the grid, ModuleMeshGrid will fire onEditorVariantApplied and onVariantApplied.
		// You can apply key-value pairs when that happens via the EXTRA_INFO node of the VARIANT node.
		// Part modules like Buffalo2's ModuleResourceVariants can make use of the key-value pairs.
		// You can specify fixed values, but ModuleMeshGrid recognizes a few keywords and will
		// replace the keyword with the appropriate value. The keywords are:
		// <<Rows>> = current row count in the grid.
		// <<Columns>> = current column count in the grid.
		// <<Stacks>> = current stack height of the grid.
		// <<Rows*Columns>> = current row count multiplied by the current column count.
		// <<Rows*Columns*Stacks>> = current row count multiplied by the current column count 
		// multiplied by the current stack height.
		// Below is an example for Buffalo2:
//		VARIANT
//		{
//			// Fields like name, displayName, etc. are automatically filled out by ModuleMeshGrid.
//
//			EXTRA_INFO
//			{
//				// ModuleMeshGrid doesn't know what packedVolumeLimit is, but it will
//				// include it along with its value when it fires the variant applied events.
//				packedVolumeLimit = 100
//
//				// ModuleMeshGrid doesn't know what packedVolumeMultiplier is, but it does know to
//				// set its value to <<Rows*Columns*Stacks>>
//				packedVolumeMultiplier = <<Rows*Columns*Stacks>>
//
//				// ModuleMeshGrid doesn't know what resourceMultiplier is, but it does know to
//				// set its value to <<Rows*Columns>>
//				resourceMultiplier = <<Rows*Columns>>
//			}
//		}
	}

	MODULE
	{
		name = ModuleCargoPart

		// The frame can only be packed in its single 1 x 1 form.
		packedVolume = 1410
	}
}
